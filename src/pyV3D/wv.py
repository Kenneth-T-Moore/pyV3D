# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_wv', [dirname(__file__)])
        except ImportError:
            import _wv
            return _wv
        if fp is not None:
            try:
                _mod = imp.load_module('_wv', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _wv = swig_import_helper()
    del swig_import_helper
else:
    import _wv
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def wv_alloc(*args):
  return _wv.wv_alloc(*args)
wv_alloc = _wv.wv_alloc

def wv_calloc(*args):
  return _wv.wv_calloc(*args)
wv_calloc = _wv.wv_calloc

def wv_realloc(*args):
  return _wv.wv_realloc(*args)
wv_realloc = _wv.wv_realloc

def wv_free(*args):
  return _wv.wv_free(*args)
wv_free = _wv.wv_free

def wv_strdup(*args):
  return _wv.wv_strdup(*args)
wv_strdup = _wv.wv_strdup

def wv_freeStripe(*args):
  return _wv.wv_freeStripe(*args)
wv_freeStripe = _wv.wv_freeStripe

def wv_freeGPrim(*args):
  return _wv.wv_freeGPrim(*args)
wv_freeGPrim = _wv.wv_freeGPrim

def wv_destroyContext(*args):
  return _wv.wv_destroyContext(*args)
wv_destroyContext = _wv.wv_destroyContext

def wv_createContext(*args):
  return _wv.wv_createContext(*args)
wv_createContext = _wv.wv_createContext

def wv_removeAll(*args):
  return _wv.wv_removeAll(*args)
wv_removeAll = _wv.wv_removeAll

def wv_setData(*args):
  return _wv.wv_setData(*args)
wv_setData = _wv.wv_setData

def wv_adjustVerts(*args):
  return _wv.wv_adjustVerts(*args)
wv_adjustVerts = _wv.wv_adjustVerts

def wv_fixupLineData(*args):
  return _wv.wv_fixupLineData(*args)
wv_fixupLineData = _wv.wv_fixupLineData

def wv_makeStripes(*args):
  return _wv.wv_makeStripes(*args)
wv_makeStripes = _wv.wv_makeStripes

def wv_computeNormals(*args):
  return _wv.wv_computeNormals(*args)
wv_computeNormals = _wv.wv_computeNormals

def wv_printGPrim(*args):
  return _wv.wv_printGPrim(*args)
wv_printGPrim = _wv.wv_printGPrim

def wv_indexGPrim(*args):
  return _wv.wv_indexGPrim(*args)
wv_indexGPrim = _wv.wv_indexGPrim

def wv_addGPrim(*args):
  return _wv.wv_addGPrim(*args)
wv_addGPrim = _wv.wv_addGPrim

def wv_triNorms(*args):
  return _wv.wv_triNorms(*args)
wv_triNorms = _wv.wv_triNorms

def wv_addArrowHeads(*args):
  return _wv.wv_addArrowHeads(*args)
wv_addArrowHeads = _wv.wv_addArrowHeads

def wv_modGPrim(*args):
  return _wv.wv_modGPrim(*args)
wv_modGPrim = _wv.wv_modGPrim

def wv_removeGPrim(*args):
  return _wv.wv_removeGPrim(*args)
wv_removeGPrim = _wv.wv_removeGPrim

def wv_writeBuf(*args):
  return _wv.wv_writeBuf(*args)
wv_writeBuf = _wv.wv_writeBuf

def wv_writeGPrim(*args):
  return _wv.wv_writeGPrim(*args)
wv_writeGPrim = _wv.wv_writeGPrim

def wv_sendGPrim(*args):
  return _wv.wv_sendGPrim(*args)
wv_sendGPrim = _wv.wv_sendGPrim

def wv_prepareForSends(*args):
  return _wv.wv_prepareForSends(*args)
wv_prepareForSends = _wv.wv_prepareForSends

def wv_finishSends(*args):
  return _wv.wv_finishSends(*args)
wv_finishSends = _wv.wv_finishSends
# This file is compatible with both classic and new-style classes.


